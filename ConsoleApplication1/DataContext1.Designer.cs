//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 12/05/2010 9:12:44
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace CrmDemoContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "SCOTT")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class CrmDemoDataContext : Devart.Data.Linq.DataContext
    {
        private static System.Data.Linq.Mapping.MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(CrmDemoDataContext));

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertCompany(Company instance);
        partial void UpdateCompany(Company instance);
        partial void DeleteCompany(Company instance);
        partial void InsertOrderDetail(OrderDetail instance);
        partial void UpdateOrderDetail(OrderDetail instance);
        partial void DeleteOrderDetail(OrderDetail instance);
        partial void InsertOrder(Order instance);
        partial void UpdateOrder(Order instance);
        partial void DeleteOrder(Order instance);
        partial void InsertPersoncontact(Personcontact instance);
        partial void UpdatePersoncontact(Personcontact instance);
        partial void DeletePersoncontact(Personcontact instance);
        partial void InsertProductcategory(Productcategory instance);
        partial void UpdateProductcategory(Productcategory instance);
        partial void DeleteProductcategory(Productcategory instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        #endregion

        public CrmDemoDataContext() :
        base(GetConnectionString("DataContext1ConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName) {

            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public CrmDemoDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDemoDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDemoDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDemoDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Company> Companies
        {
            get
            {
                return this.GetTable<Company>();
            }
        }

        public Devart.Data.Linq.Table<OrderDetail> OrderDetails
        {
            get
            {
                return this.GetTable<OrderDetail>();
            }
        }

        public Devart.Data.Linq.Table<Order> Orders
        {
            get
            {
                return this.GetTable<Order>();
            }
        }

        public Devart.Data.Linq.Table<Personcontact> Personcontacts
        {
            get
            {
                return this.GetTable<Personcontact>();
            }
        }

        public Devart.Data.Linq.Table<Productcategory> Productcategories
        {
            get
            {
                return this.GetTable<Productcategory>();
            }
        }

        public Devart.Data.Linq.Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }
    }


    /// <summary>
    /// There are no comments for Company in the schema.
    /// </summary>
    [Table(Name = @"SCOTT.""Company""")]
    public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Companyid;

        private string _Companyname;

        private System.Nullable<double> _Primarycontact;

        private string _Web;

        private string _Email;

        private string _Addresstitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _Postalcode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private EntitySet<Order> _Orders;

        private EntitySet<Order> _Orders1;

        private EntityRef<Personcontact> _Personcontact;

        private EntitySet<Personcontact> _Personcontacts;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCompanyidChanging(double value);
        partial void OnCompanyidChanged();
        partial void OnCompanynameChanging(string value);
        partial void OnCompanynameChanged();
        partial void OnPrimarycontactChanging(System.Nullable<double> value);
        partial void OnPrimarycontactChanged();
        partial void OnWebChanging(string value);
        partial void OnWebChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnAddresstitleChanging(string value);
        partial void OnAddresstitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalcodeChanging(string value);
        partial void OnPostalcodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Company()
        {
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
            this._Personcontact  = default(EntityRef<Personcontact>);
            this._Personcontacts = new EntitySet<Personcontact>(new Action<Personcontact>(this.attach_Personcontacts), new Action<Personcontact>(this.detach_Personcontacts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Companyid in the schema.
        /// </summary>
        [Column(Name = @"""CompanyID""", Storage = "_Companyid", CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsPrimaryKey = true)]
        public double Companyid
        {
            get
            {
                return this._Companyid;
            }
            set
            {
                if (this._Companyid != value)
                {
                    this.OnCompanyidChanging(value);
                    this.SendPropertyChanging();
                    this._Companyid = value;
                    this.SendPropertyChanged("Companyid");
                    this.OnCompanyidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Companyname in the schema.
        /// </summary>
        [Column(Name = @"""CompanyName""", Storage = "_Companyname", CanBeNull = false, DbType = "VARCHAR2(40) NOT NULL")]
        public string Companyname
        {
            get
            {
                return this._Companyname;
            }
            set
            {
                if (this._Companyname != value)
                {
                    this.OnCompanynameChanging(value);
                    this.SendPropertyChanging();
                    this._Companyname = value;
                    this.SendPropertyChanged("Companyname");
                    this.OnCompanynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Primarycontact in the schema.
        /// </summary>
        [Column(Name = @"""PrimaryContact""", Storage = "_Primarycontact", DbType = "NUMBER(11)")]
        public System.Nullable<double> Primarycontact
        {
            get
            {
                return this._Primarycontact;
            }
            set
            {
                if (this._Primarycontact != value)
                {
                    if (this._Personcontact.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPrimarycontactChanging(value);
                    this.SendPropertyChanging();
                    this._Primarycontact = value;
                    this.SendPropertyChanged("Primarycontact");
                    this.OnPrimarycontactChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Web in the schema.
        /// </summary>
        [Column(Name = @"""Web""", Storage = "_Web", DbType = "VARCHAR2(100)")]
        public string Web
        {
            get
            {
                return this._Web;
            }
            set
            {
                if (this._Web != value)
                {
                    this.OnWebChanging(value);
                    this.SendPropertyChanging();
                    this._Web = value;
                    this.SendPropertyChanged("Web");
                    this.OnWebChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"""Email""", Storage = "_Email", DbType = "VARCHAR2(50)")]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Addresstitle in the schema.
        /// </summary>
        [Column(Name = @"""AddressTitle""", Storage = "_Addresstitle", DbType = "VARCHAR2(120)")]
        public string Addresstitle
        {
            get
            {
                return this._Addresstitle;
            }
            set
            {
                if (this._Addresstitle != value)
                {
                    this.OnAddresstitleChanging(value);
                    this.SendPropertyChanging();
                    this._Addresstitle = value;
                    this.SendPropertyChanged("Addresstitle");
                    this.OnAddresstitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"""Address""", Storage = "_Address", DbType = "VARCHAR2(60)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"""City""", Storage = "_City", DbType = "VARCHAR2(30)")]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Name = @"""Region""", Storage = "_Region", DbType = "VARCHAR2(20)")]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postalcode in the schema.
        /// </summary>
        [Column(Name = @"""PostalCode""", Storage = "_Postalcode", DbType = "VARCHAR2(15)")]
        public string Postalcode
        {
            get
            {
                return this._Postalcode;
            }
            set
            {
                if (this._Postalcode != value)
                {
                    this.OnPostalcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Postalcode = value;
                    this.SendPropertyChanged("Postalcode");
                    this.OnPostalcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"""Country""", Storage = "_Country", DbType = "VARCHAR2(20)")]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"""Phone""", Storage = "_Phone", DbType = "VARCHAR2(25)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"""Fax""", Storage = "_Fax", DbType = "VARCHAR2(25)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        [Association(Name="Company_Order", Storage="_Orders", OtherKey="Shipcompanyid")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        [Association(Name="Company_Order1", Storage="_Orders1", OtherKey="Companyid")]
        public EntitySet<Order> Orders1
        {
            get
            {
                return this._Orders1;
            }
            set
            {
                this._Orders1.Assign(value);
            }
        }

        [Association(Name="Personcontact_Company", Storage="_Personcontact", ThisKey="Primarycontact", IsForeignKey=true)]
        public Personcontact Personcontact
        {
            get
            {
                return this._Personcontact.Entity;
            }
            set
            {
                Personcontact previousValue = this._Personcontact.Entity;
                if ((previousValue != value) || (this._Personcontact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Personcontact.Entity = null;
                        previousValue.Companies.Remove(this);
                    }
                    this._Personcontact.Entity = value;
                    if (value != null)
                    {
                        value.Companies.Add(this);
                        this._Primarycontact = value.Contactid;
                    }
                    else
                    {
                        this._Primarycontact = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Personcontact");
                }
            }
        }

        [Association(Name="Company_Personcontact", Storage="_Personcontacts", OtherKey="Companyid")]
        public EntitySet<Personcontact> Personcontacts
        {
            get
            {
                return this._Personcontacts;
            }
            set
            {
                this._Personcontacts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Company = this;
        }
    
        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Company = null;
        }

        private void attach_Orders1(Order entity)
        {
            this.SendPropertyChanging("Orders1");
            entity.Company1 = this;
        }
    
        private void detach_Orders1(Order entity)
        {
            this.SendPropertyChanging("Orders1");
            entity.Company1 = null;
        }

        private void attach_Personcontacts(Personcontact entity)
        {
            this.SendPropertyChanging("Personcontacts");
            entity.Company = this;
        }
    
        private void detach_Personcontacts(Personcontact entity)
        {
            this.SendPropertyChanging("Personcontacts");
            entity.Company = null;
        }
    }


    /// <summary>
    /// There are no comments for OrderDetail in the schema.
    /// </summary>
    [Table(Name = @"SCOTT.""Order Details""")]
    public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Orderid;

        private double _Productid;

        private System.Nullable<double> _Price;

        private System.Nullable<double> _Quantity;

        private EntityRef<Order> _Order;

        private EntityRef<Product> _Product;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderidChanging(double value);
        partial void OnOrderidChanged();
        partial void OnProductidChanging(double value);
        partial void OnProductidChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnQuantityChanging(System.Nullable<double> value);
        partial void OnQuantityChanged();
        #endregion

        public OrderDetail()
        {
            this._Order  = default(EntityRef<Order>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Orderid in the schema.
        /// </summary>
        [Column(Name = @"""OrderID""", Storage = "_Orderid", CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsPrimaryKey = true)]
        public double Orderid
        {
            get
            {
                return this._Orderid;
            }
            set
            {
                if (this._Orderid != value)
                {
                    if (this._Order.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderidChanging(value);
                    this.SendPropertyChanging();
                    this._Orderid = value;
                    this.SendPropertyChanged("Orderid");
                    this.OnOrderidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Productid in the schema.
        /// </summary>
        [Column(Name = @"""ProductID""", Storage = "_Productid", CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsPrimaryKey = true)]
        public double Productid
        {
            get
            {
                return this._Productid;
            }
            set
            {
                if (this._Productid != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductidChanging(value);
                    this.SendPropertyChanging();
                    this._Productid = value;
                    this.SendPropertyChanged("Productid");
                    this.OnProductidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"""Price""", Storage = "_Price", DbType = "NUMBER(10,2)")]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Quantity in the schema.
        /// </summary>
        [Column(Name = @"""Quantity""", Storage = "_Quantity", DbType = "NUMBER(10,4)")]
        public System.Nullable<double> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        [Association(Name="Order_OrderDetail", Storage="_Order", ThisKey="Orderid", IsForeignKey=true)]
        public Order Order
        {
            get
            {
                return this._Order.Entity;
            }
            set
            {
                Order previousValue = this._Order.Entity;
                if ((previousValue != value) || (this._Order.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Order.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._Order.Entity = value;
                    if (value != null)
                    {
                        value.OrderDetails.Add(this);
                        this._Orderid = value.Orderid;
                    }
                    else
                    {
                        this._Orderid = default(double);
                    }
                    this.SendPropertyChanged("Order");
                }
            }
        }

        [Association(Name="Product_OrderDetail", Storage="_Product", ThisKey="Productid", IsForeignKey=true)]
        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.OrderDetails.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        value.OrderDetails.Add(this);
                        this._Productid = value.Productid;
                    }
                    else
                    {
                        this._Productid = default(double);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for Order in the schema.
    /// </summary>
    [Table(Name = @"SCOTT.""Orders""")]
    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Orderid;

        private System.Nullable<double> _Companyid;

        private System.Nullable<double> _Contactid;

        private System.DateTime _Orderdate;

        private System.Nullable<double> _Freight;

        private System.Nullable<System.DateTime> _Shipdate;

        private System.Nullable<double> _Shipcompanyid;

        private System.Nullable<double> _Discount;

        private EntitySet<OrderDetail> _OrderDetails;

        private EntityRef<Company> _Company;

        private EntityRef<Company> _Company1;

        private EntityRef<Personcontact> _Personcontact;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOrderidChanging(double value);
        partial void OnOrderidChanged();
        partial void OnCompanyidChanging(System.Nullable<double> value);
        partial void OnCompanyidChanged();
        partial void OnContactidChanging(System.Nullable<double> value);
        partial void OnContactidChanged();
        partial void OnOrderdateChanging(System.DateTime value);
        partial void OnOrderdateChanged();
        partial void OnFreightChanging(System.Nullable<double> value);
        partial void OnFreightChanged();
        partial void OnShipdateChanging(System.Nullable<System.DateTime> value);
        partial void OnShipdateChanged();
        partial void OnShipcompanyidChanging(System.Nullable<double> value);
        partial void OnShipcompanyidChanged();
        partial void OnDiscountChanging(System.Nullable<double> value);
        partial void OnDiscountChanged();
        #endregion

        public Order()
        {
            this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
            this._Company  = default(EntityRef<Company>);
            this._Company1  = default(EntityRef<Company>);
            this._Personcontact  = default(EntityRef<Personcontact>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Orderid in the schema.
        /// </summary>
        [Column(Name = @"""OrderID""", Storage = "_Orderid", CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsPrimaryKey = true)]
        public double Orderid
        {
            get
            {
                return this._Orderid;
            }
            set
            {
                if (this._Orderid != value)
                {
                    this.OnOrderidChanging(value);
                    this.SendPropertyChanging();
                    this._Orderid = value;
                    this.SendPropertyChanged("Orderid");
                    this.OnOrderidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Companyid in the schema.
        /// </summary>
        [Column(Name = @"""CompanyID""", Storage = "_Companyid", DbType = "NUMBER(11)")]
        public System.Nullable<double> Companyid
        {
            get
            {
                return this._Companyid;
            }
            set
            {
                if (this._Companyid != value)
                {
                    if (this._Company1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyidChanging(value);
                    this.SendPropertyChanging();
                    this._Companyid = value;
                    this.SendPropertyChanged("Companyid");
                    this.OnCompanyidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Contactid in the schema.
        /// </summary>
        [Column(Name = @"""ContactID""", Storage = "_Contactid", DbType = "NUMBER(11)")]
        public System.Nullable<double> Contactid
        {
            get
            {
                return this._Contactid;
            }
            set
            {
                if (this._Contactid != value)
                {
                    if (this._Personcontact.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactidChanging(value);
                    this.SendPropertyChanging();
                    this._Contactid = value;
                    this.SendPropertyChanged("Contactid");
                    this.OnContactidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Orderdate in the schema.
        /// </summary>
        [Column(Name = @"""OrderDate""", Storage = "_Orderdate", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime Orderdate
        {
            get
            {
                return this._Orderdate;
            }
            set
            {
                if (this._Orderdate != value)
                {
                    this.OnOrderdateChanging(value);
                    this.SendPropertyChanging();
                    this._Orderdate = value;
                    this.SendPropertyChanged("Orderdate");
                    this.OnOrderdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Freight in the schema.
        /// </summary>
        [Column(Name = @"""Freight""", Storage = "_Freight", DbType = "NUMBER(10,2)")]
        public System.Nullable<double> Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging();
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Shipdate in the schema.
        /// </summary>
        [Column(Name = @"""ShipDate""", Storage = "_Shipdate", DbType = "DATE")]
        public System.Nullable<System.DateTime> Shipdate
        {
            get
            {
                return this._Shipdate;
            }
            set
            {
                if (this._Shipdate != value)
                {
                    this.OnShipdateChanging(value);
                    this.SendPropertyChanging();
                    this._Shipdate = value;
                    this.SendPropertyChanged("Shipdate");
                    this.OnShipdateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Shipcompanyid in the schema.
        /// </summary>
        [Column(Name = @"""ShipCompanyID""", Storage = "_Shipcompanyid", DbType = "NUMBER(11)")]
        public System.Nullable<double> Shipcompanyid
        {
            get
            {
                return this._Shipcompanyid;
            }
            set
            {
                if (this._Shipcompanyid != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShipcompanyidChanging(value);
                    this.SendPropertyChanging();
                    this._Shipcompanyid = value;
                    this.SendPropertyChanged("Shipcompanyid");
                    this.OnShipcompanyidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discount in the schema.
        /// </summary>
        [Column(Name = @"""Discount""", Storage = "_Discount", DbType = "NUMBER(10,2)")]
        public System.Nullable<double> Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

        [Association(Name="Order_OrderDetail", Storage="_OrderDetails", OtherKey="Orderid")]
        public EntitySet<OrderDetail> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

        [Association(Name="Company_Order", Storage="_Company", ThisKey="Shipcompanyid", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        value.Orders.Add(this);
                        this._Shipcompanyid = value.Companyid;
                    }
                    else
                    {
                        this._Shipcompanyid = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }

        [Association(Name="Company_Order1", Storage="_Company1", ThisKey="Companyid", IsForeignKey=true)]
        public Company Company1
        {
            get
            {
                return this._Company1.Entity;
            }
            set
            {
                Company previousValue = this._Company1.Entity;
                if ((previousValue != value) || (this._Company1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company1.Entity = null;
                        previousValue.Orders1.Remove(this);
                    }
                    this._Company1.Entity = value;
                    if (value != null)
                    {
                        value.Orders1.Add(this);
                        this._Companyid = value.Companyid;
                    }
                    else
                    {
                        this._Companyid = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Company1");
                }
            }
        }

        [Association(Name="Personcontact_Order", Storage="_Personcontact", ThisKey="Contactid", IsForeignKey=true)]
        public Personcontact Personcontact
        {
            get
            {
                return this._Personcontact.Entity;
            }
            set
            {
                Personcontact previousValue = this._Personcontact.Entity;
                if ((previousValue != value) || (this._Personcontact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Personcontact.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Personcontact.Entity = value;
                    if (value != null)
                    {
                        value.Orders.Add(this);
                        this._Contactid = value.Contactid;
                    }
                    else
                    {
                        this._Contactid = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Personcontact");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Order = this;
        }
    
        private void detach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Order = null;
        }
    }


    /// <summary>
    /// There are no comments for Personcontact in the schema.
    /// </summary>
    [Table(Name = @"SCOTT.""PersonContact""")]
    public partial class Personcontact : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Contactid;

        private string _Title;

        private string _Firstname;

        private string _Middlename;

        private string _Lastname;

        private System.Nullable<double> _Companyid;

        private string _Homephone;

        private string _Mobilephone;

        private string _Addresstitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _Postalcode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private EntitySet<Company> _Companies;

        private EntitySet<Order> _Orders;

        private EntityRef<Company> _Company;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnContactidChanging(double value);
        partial void OnContactidChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnMiddlenameChanging(string value);
        partial void OnMiddlenameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnCompanyidChanging(System.Nullable<double> value);
        partial void OnCompanyidChanged();
        partial void OnHomephoneChanging(string value);
        partial void OnHomephoneChanged();
        partial void OnMobilephoneChanging(string value);
        partial void OnMobilephoneChanged();
        partial void OnAddresstitleChanging(string value);
        partial void OnAddresstitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalcodeChanging(string value);
        partial void OnPostalcodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Personcontact()
        {
            this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Company  = default(EntityRef<Company>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Contactid in the schema.
        /// </summary>
        [Column(Name = @"""ContactID""", Storage = "_Contactid", CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsPrimaryKey = true)]
        public double Contactid
        {
            get
            {
                return this._Contactid;
            }
            set
            {
                if (this._Contactid != value)
                {
                    this.OnContactidChanging(value);
                    this.SendPropertyChanging();
                    this._Contactid = value;
                    this.SendPropertyChanged("Contactid");
                    this.OnContactidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"""Title""", Storage = "_Title", DbType = "VARCHAR2(8)")]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Firstname in the schema.
        /// </summary>
        [Column(Name = @"""FirstName""", Storage = "_Firstname", DbType = "VARCHAR2(50)")]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if (this._Firstname != value)
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Middlename in the schema.
        /// </summary>
        [Column(Name = @"""MiddleName""", Storage = "_Middlename", DbType = "VARCHAR2(50)")]
        public string Middlename
        {
            get
            {
                return this._Middlename;
            }
            set
            {
                if (this._Middlename != value)
                {
                    this.OnMiddlenameChanging(value);
                    this.SendPropertyChanging();
                    this._Middlename = value;
                    this.SendPropertyChanged("Middlename");
                    this.OnMiddlenameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Lastname in the schema.
        /// </summary>
        [Column(Name = @"""LastName""", Storage = "_Lastname", DbType = "VARCHAR2(50)")]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if (this._Lastname != value)
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Companyid in the schema.
        /// </summary>
        [Column(Name = @"""CompanyID""", Storage = "_Companyid", DbType = "NUMBER(11)")]
        public System.Nullable<double> Companyid
        {
            get
            {
                return this._Companyid;
            }
            set
            {
                if (this._Companyid != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyidChanging(value);
                    this.SendPropertyChanging();
                    this._Companyid = value;
                    this.SendPropertyChanged("Companyid");
                    this.OnCompanyidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Homephone in the schema.
        /// </summary>
        [Column(Name = @"""HomePhone""", Storage = "_Homephone", DbType = "VARCHAR2(25)")]
        public string Homephone
        {
            get
            {
                return this._Homephone;
            }
            set
            {
                if (this._Homephone != value)
                {
                    this.OnHomephoneChanging(value);
                    this.SendPropertyChanging();
                    this._Homephone = value;
                    this.SendPropertyChanged("Homephone");
                    this.OnHomephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mobilephone in the schema.
        /// </summary>
        [Column(Name = @"""MobilePhone""", Storage = "_Mobilephone", DbType = "VARCHAR2(25)")]
        public string Mobilephone
        {
            get
            {
                return this._Mobilephone;
            }
            set
            {
                if (this._Mobilephone != value)
                {
                    this.OnMobilephoneChanging(value);
                    this.SendPropertyChanging();
                    this._Mobilephone = value;
                    this.SendPropertyChanged("Mobilephone");
                    this.OnMobilephoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Addresstitle in the schema.
        /// </summary>
        [Column(Name = @"""AddressTitle""", Storage = "_Addresstitle", DbType = "VARCHAR2(120)")]
        public string Addresstitle
        {
            get
            {
                return this._Addresstitle;
            }
            set
            {
                if (this._Addresstitle != value)
                {
                    this.OnAddresstitleChanging(value);
                    this.SendPropertyChanging();
                    this._Addresstitle = value;
                    this.SendPropertyChanged("Addresstitle");
                    this.OnAddresstitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"""Address""", Storage = "_Address", DbType = "VARCHAR2(60)")]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Name = @"""City""", Storage = "_City", DbType = "VARCHAR2(30)")]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Region in the schema.
        /// </summary>
        [Column(Name = @"""Region""", Storage = "_Region", DbType = "VARCHAR2(20)")]
        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Postalcode in the schema.
        /// </summary>
        [Column(Name = @"""PostalCode""", Storage = "_Postalcode", DbType = "VARCHAR2(15)")]
        public string Postalcode
        {
            get
            {
                return this._Postalcode;
            }
            set
            {
                if (this._Postalcode != value)
                {
                    this.OnPostalcodeChanging(value);
                    this.SendPropertyChanging();
                    this._Postalcode = value;
                    this.SendPropertyChanged("Postalcode");
                    this.OnPostalcodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Name = @"""Country""", Storage = "_Country", DbType = "VARCHAR2(20)")]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"""Phone""", Storage = "_Phone", DbType = "VARCHAR2(25)")]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fax in the schema.
        /// </summary>
        [Column(Name = @"""Fax""", Storage = "_Fax", DbType = "VARCHAR2(25)")]
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        [Association(Name="Personcontact_Company", Storage="_Companies", OtherKey="Primarycontact")]
        public EntitySet<Company> Companies
        {
            get
            {
                return this._Companies;
            }
            set
            {
                this._Companies.Assign(value);
            }
        }

        [Association(Name="Personcontact_Order", Storage="_Orders", OtherKey="Contactid")]
        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        [Association(Name="Company_Personcontact", Storage="_Company", ThisKey="Companyid", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.Personcontacts.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        value.Personcontacts.Add(this);
                        this._Companyid = value.Companyid;
                    }
                    else
                    {
                        this._Companyid = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Companies(Company entity)
        {
            this.SendPropertyChanging("Companies");
            entity.Personcontact = this;
        }
    
        private void detach_Companies(Company entity)
        {
            this.SendPropertyChanging("Companies");
            entity.Personcontact = null;
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Personcontact = this;
        }
    
        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Personcontact = null;
        }
    }


    /// <summary>
    /// There are no comments for Productcategory in the schema.
    /// </summary>
    [Table(Name = @"SCOTT.""ProductCategories""")]
    public partial class Productcategory : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Categoryid;

        private string _Categoryname;

        private System.Nullable<double> _Parentcategory;

        private EntitySet<Product> _Products;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryidChanging(double value);
        partial void OnCategoryidChanged();
        partial void OnCategorynameChanging(string value);
        partial void OnCategorynameChanged();
        partial void OnParentcategoryChanging(System.Nullable<double> value);
        partial void OnParentcategoryChanged();
        #endregion

        public Productcategory()
        {
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Categoryid in the schema.
        /// </summary>
        [Column(Name = @"""CategoryID""", Storage = "_Categoryid", CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsPrimaryKey = true)]
        public double Categoryid
        {
            get
            {
                return this._Categoryid;
            }
            set
            {
                if (this._Categoryid != value)
                {
                    this.OnCategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryid = value;
                    this.SendPropertyChanged("Categoryid");
                    this.OnCategoryidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Categoryname in the schema.
        /// </summary>
        [Column(Name = @"""CategoryName""", Storage = "_Categoryname", DbType = "VARCHAR2(20)")]
        public string Categoryname
        {
            get
            {
                return this._Categoryname;
            }
            set
            {
                if (this._Categoryname != value)
                {
                    this.OnCategorynameChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryname = value;
                    this.SendPropertyChanged("Categoryname");
                    this.OnCategorynameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Parentcategory in the schema.
        /// </summary>
        [Column(Name = @"""ParentCategory""", Storage = "_Parentcategory", DbType = "NUMBER(11)")]
        public System.Nullable<double> Parentcategory
        {
            get
            {
                return this._Parentcategory;
            }
            set
            {
                if (this._Parentcategory != value)
                {
                    this.OnParentcategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Parentcategory = value;
                    this.SendPropertyChanged("Parentcategory");
                    this.OnParentcategoryChanged();
                }
            }
        }

        [Association(Name="Productcategory_Product", Storage="_Products", OtherKey="Categoryid")]
        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Productcategory = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Productcategory = null;
        }
    }


    /// <summary>
    /// There are no comments for Product in the schema.
    /// </summary>
    [Table(Name = @"SCOTT.""Products""")]
    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private double _Productid;

        private string _Productname;

        private System.Nullable<double> _Categoryid;

        private string _Unitname;

        private System.Nullable<int> _Unitscale;

        private System.Nullable<double> _Instock;

        private System.Nullable<double> _Price;

        private System.Nullable<double> _Discontinuedprice;

        private EntitySet<OrderDetail> _OrderDetails;

        private EntityRef<Productcategory> _Productcategory;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnProductidChanging(double value);
        partial void OnProductidChanged();
        partial void OnProductnameChanging(string value);
        partial void OnProductnameChanged();
        partial void OnCategoryidChanging(System.Nullable<double> value);
        partial void OnCategoryidChanged();
        partial void OnUnitnameChanging(string value);
        partial void OnUnitnameChanged();
        partial void OnUnitscaleChanging(System.Nullable<int> value);
        partial void OnUnitscaleChanged();
        partial void OnInstockChanging(System.Nullable<double> value);
        partial void OnInstockChanged();
        partial void OnPriceChanging(System.Nullable<double> value);
        partial void OnPriceChanged();
        partial void OnDiscontinuedpriceChanging(System.Nullable<double> value);
        partial void OnDiscontinuedpriceChanged();
        #endregion

        public Product()
        {
            this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
            this._Productcategory  = default(EntityRef<Productcategory>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Productid in the schema.
        /// </summary>
        [Column(Name = @"""ProductID""", Storage = "_Productid", CanBeNull = false, DbType = "NUMBER(11) NOT NULL", IsPrimaryKey = true)]
        public double Productid
        {
            get
            {
                return this._Productid;
            }
            set
            {
                if (this._Productid != value)
                {
                    this.OnProductidChanging(value);
                    this.SendPropertyChanging();
                    this._Productid = value;
                    this.SendPropertyChanged("Productid");
                    this.OnProductidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Productname in the schema.
        /// </summary>
        [Column(Name = @"""ProductName""", Storage = "_Productname", CanBeNull = false, DbType = "VARCHAR2(50) NOT NULL")]
        public string Productname
        {
            get
            {
                return this._Productname;
            }
            set
            {
                if (this._Productname != value)
                {
                    this.OnProductnameChanging(value);
                    this.SendPropertyChanging();
                    this._Productname = value;
                    this.SendPropertyChanged("Productname");
                    this.OnProductnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Categoryid in the schema.
        /// </summary>
        [Column(Name = @"""CategoryID""", Storage = "_Categoryid", DbType = "NUMBER(11)")]
        public System.Nullable<double> Categoryid
        {
            get
            {
                return this._Categoryid;
            }
            set
            {
                if (this._Categoryid != value)
                {
                    if (this._Productcategory.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryidChanging(value);
                    this.SendPropertyChanging();
                    this._Categoryid = value;
                    this.SendPropertyChanged("Categoryid");
                    this.OnCategoryidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unitname in the schema.
        /// </summary>
        [Column(Name = @"""UnitName""", Storage = "_Unitname", DbType = "VARCHAR2(20)")]
        public string Unitname
        {
            get
            {
                return this._Unitname;
            }
            set
            {
                if (this._Unitname != value)
                {
                    this.OnUnitnameChanging(value);
                    this.SendPropertyChanging();
                    this._Unitname = value;
                    this.SendPropertyChanged("Unitname");
                    this.OnUnitnameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Unitscale in the schema.
        /// </summary>
        [Column(Name = @"""UnitScale""", Storage = "_Unitscale", DbType = "NUMBER(5)")]
        public System.Nullable<int> Unitscale
        {
            get
            {
                return this._Unitscale;
            }
            set
            {
                if (this._Unitscale != value)
                {
                    this.OnUnitscaleChanging(value);
                    this.SendPropertyChanging();
                    this._Unitscale = value;
                    this.SendPropertyChanged("Unitscale");
                    this.OnUnitscaleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Instock in the schema.
        /// </summary>
        [Column(Name = @"""InStock""", Storage = "_Instock", DbType = "NUMBER(11)")]
        public System.Nullable<double> Instock
        {
            get
            {
                return this._Instock;
            }
            set
            {
                if (this._Instock != value)
                {
                    this.OnInstockChanging(value);
                    this.SendPropertyChanging();
                    this._Instock = value;
                    this.SendPropertyChanged("Instock");
                    this.OnInstockChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Price in the schema.
        /// </summary>
        [Column(Name = @"""Price""", Storage = "_Price", DbType = "NUMBER(10,2)")]
        public System.Nullable<double> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Discontinuedprice in the schema.
        /// </summary>
        [Column(Name = @"""DiscontinuedPrice""", Storage = "_Discontinuedprice", DbType = "NUMBER(10,2)")]
        public System.Nullable<double> Discontinuedprice
        {
            get
            {
                return this._Discontinuedprice;
            }
            set
            {
                if (this._Discontinuedprice != value)
                {
                    this.OnDiscontinuedpriceChanging(value);
                    this.SendPropertyChanging();
                    this._Discontinuedprice = value;
                    this.SendPropertyChanged("Discontinuedprice");
                    this.OnDiscontinuedpriceChanged();
                }
            }
        }

        [Association(Name="Product_OrderDetail", Storage="_OrderDetails", OtherKey="Productid")]
        public EntitySet<OrderDetail> OrderDetails
        {
            get
            {
                return this._OrderDetails;
            }
            set
            {
                this._OrderDetails.Assign(value);
            }
        }

        [Association(Name="Productcategory_Product", Storage="_Productcategory", ThisKey="Categoryid", IsForeignKey=true)]
        public Productcategory Productcategory
        {
            get
            {
                return this._Productcategory.Entity;
            }
            set
            {
                Productcategory previousValue = this._Productcategory.Entity;
                if ((previousValue != value) || (this._Productcategory.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Productcategory.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Productcategory.Entity = value;
                    if (value != null)
                    {
                        value.Products.Add(this);
                        this._Categoryid = value.Categoryid;
                    }
                    else
                    {
                        this._Categoryid = default(System.Nullable<double>);
                    }
                    this.SendPropertyChanged("Productcategory");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Product = this;
        }
    
        private void detach_OrderDetails(OrderDetail entity)
        {
            this.SendPropertyChanging("OrderDetails");
            entity.Product = null;
        }
    }
}
